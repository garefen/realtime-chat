{"version":3,"sources":["logo.svg","config.js","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","useState","messages","setMessages","textInput","setTextInput","username","setUsername","useEffect","database","ref","orderByChild","on","snapshot","newMessages","val","console","log","className","onSubmit","event","preventDefault","user","Math","floor","random","Date","toISOString","push","set","text","value","onChange","e","target","type","Object","values","map","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,sICiB1BC,E,OAHFC,EAASC,cAVC,CACrBC,OAAQ,0CACRC,WAAY,uCACZC,YAAa,8CACbC,UAAW,uBACXC,cAAe,mCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBCoDJC,MA1Df,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACLC,EADK,KACKC,EADL,OAEuBF,mBAAS,IAFhC,mBAELG,EAFK,KAEMC,EAFN,OAGqBJ,mBAAS,IAH9B,mBAGLK,EAHK,KAGKC,EAHL,KAqCb,OARAC,qBAAU,WACgBnB,EAAKoB,WAAWC,IAAhB,sBAA0CC,aAAa,UAC/DC,GAAG,SAAS,SAACC,GANN,IAACC,KAOLD,EAASE,QANXZ,EAAYW,GAO3BE,QAAQC,IAAIJ,EAASE,YAEtB,IAGD,yBAAKG,UAAU,OACb,0BAAMC,SAlCkB,SAACC,GAC3BA,EAAMC,iBACN,IAGIC,EAHaC,KAAKC,MAAsB,KAAhBD,KAAKE,WACrB,IAAIC,MAAOC,cAIrBL,EADe,KAAbhB,EACK,UAEAA,EAEgBjB,EAAKoB,WAAWC,IAAhB,sBAA0CkB,OAClDC,IAAI,CACnBC,KAAM1B,EACNE,SAAUgB,IAGZjB,EAAa,MAkBT,yBAAKa,UAAU,WAAWa,MAAOzB,EAAU0B,SAAU,SAACC,GAAQ1B,EAAY0B,EAAEC,OAAOH,SACjF,oDACA,2BAAOI,KAAK,UAEd,yBAAKjB,UAAU,iBACb,2BAAOiB,KAAK,OAAOJ,MAAO3B,EAAW4B,SAAU,SAACC,GAAQ5B,EAAa4B,EAAEC,OAAOH,UAC9E,4BAAQI,KAAK,UAAb,YAGJ,yBAAKjB,UAAU,YACZkB,OAAOC,OAAOnC,GAAUoC,KAAI,SAACP,GAC5B,OAAO,6BAAK,8BAAOA,EAAMzB,UAAlB,KAAqCyB,EAAMD,YC7CxCS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.4b51b8a1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import firebase from 'firebase'\n\n// Set the configuration for your app\n  // TODO: Replace with your project's config object\n  const firebaseConfig = {\n    apiKey: \"AIzaSyBhGsZH4wktjOyIZOJ_GVmTuV4TCXV8LsE\",\n    authDomain: \"real-time-chat-cc620.firebaseapp.com\",\n    databaseURL: \"https://real-time-chat-cc620.firebaseio.com\",\n    projectId: \"real-time-chat-cc620\",\n    storageBucket: \"real-time-chat-cc620.appspot.com\",\n    messagingSenderId: \"234045026156\",\n    appId: \"1:234045026156:web:476b9eaf041e06557e4d49\",\n    measurementId: \"G-HK9PK5MVHD\"\n  };\n  const fire = firebase.initializeApp(firebaseConfig);\n\n\n  export default fire;","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport fire from './config';\n\n\nfunction App() {\n  const [ messages, setMessages ] = useState({});\n  const [ textInput, setTextInput ] = useState(\"\");\n  const [ username, setUsername ] = useState(\"\");\n \n  const handleMessageSubmit = (event) => {\n    event.preventDefault();\n    const randomId = Math.floor(Math.random() * 100000000000000);\n    const now = new Date().toISOString();\n\n    let user;\n    if (username === \"\") {\n      user = \"Default\"\n    } else {\n      user = username\n    }\n    const newMessagePushed = fire.database().ref(`/messages/firebase`).push();\n    newMessagePushed.set({\n      text: textInput,\n      username: user\n    })\n\n    setTextInput('');\n  }\n\n  const handleNewMessage = (newMessages) => {\n    if (newMessages) setMessages(newMessages);\n  }\n\n  useEffect(() => {\n    const lookForMessages = fire.database().ref(`/messages/firebase`).orderByChild('sendAt');\n    lookForMessages.on('value', (snapshot) => {\n      handleNewMessage(snapshot.val());\n      console.log(snapshot.val())\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={handleMessageSubmit}>\n        <div className=\"username\" value={username} onChange={(e) => { setUsername(e.target.value) }}>\n          <label>Informe seu nome:</label>\n          <input type=\"text\" />\n        </div>\n        <div className=\"message-input\">\n          <input type=\"text\" value={textInput} onChange={(e) => { setTextInput(e.target.value) }}/>\n          <button type=\"submit\" >Enviar</button>\n        </div>\n      </form>\n      <div className=\"messages\">\n        {Object.values(messages).map((value) => {\n          return <div><span>{value.username}</span>: {value.text}</div>;\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}